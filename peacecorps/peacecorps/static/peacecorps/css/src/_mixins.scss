/*
 * Global mixins.
 */

/*
 * Sets the font-size in rems with a px fallback.
 */
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin clearfix {
  &:after {
    clear: both;
    content: " ";
    display: block;
    font-size: 0;
    height: 0;
    visibility: hidden;
  }
}

@mixin u-visually_hidden {
  position: absolute !important;
  top: -9999px !important;
  left: -9999px !important;
}

@mixin inset--md {
  @include span-columns(8);
  @include shift(2);

  @include media($md) {
    @include span-columns(7);
    @include shift(1);

  }
  @include media($sm) {
    @include shift(0);
    @include span-columns(4);
    padding: 0 1em;
  }
}

/*
 * Parses a text value to an int.
 */
@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

/*
 * Sets the property to the values in rem, with a px fallback for old browsers.
 *
 * $property The css property to set the values on
 * $values A list of rem values to set on the property.
 *
 * Example: @include rem(margin, 1rem 0 2rem);
 */
@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}
